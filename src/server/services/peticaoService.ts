import { OpenAI } from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY\n});\n\ninterface DadosPeticao {\n  tipo: string;\n  tese: string;\n  cliente: string;\n  processo: string;\n  modeloReferencia?: string;\n  informacoesAdicionais?: string;\n}\n\ninterface TemplateModelo {\n  [key: string]: string;\n}\n\nconst templates: TemplateModelo = {\n  'replica-licenca-premio': `EXCELENTÍSSIMO SENHOR DOUTOR JUIZ\n\nVem, respeitosamente, perante Vossa Excelência, o(a) cliente [CLIENTE], por seu advogado infra-assinado, apresentar RÉPLICA ao processo nº [PROCESSO], relativo à demanda sobre LICENÇA-PRÊMIO, pelos motivos de fato e de direito a seguir expostos:\n\nI - DOS FATOS\n\nTrata-se de ação em que o cliente busca o reconhecimento de seu direito à licença-prêmio não usufruída durante sua carreira profissional.\n\nII - DO DIREITO\n\nA legislação trabalhista garante ao servidor público o direito à licença-prêmio como forma de reconhecimento ao tempo de serviço prestado.\n\nIII - DO PEDIDO\n\nPelo exposto, requer-se a procedência da demanda para condenar a parte adversa ao pagamento da verba devida.\n\nRespeitosamente submetido.`,\n\n  'replica-abono-permanencia': `EXCELENTÍSSIMO SENHOR DOUTOR JUIZ\n\nVem, respeitosamente, perante Vossa Excelência, o(a) cliente [CLIENTE], por seu advogado infra-assinado, apresentar RÉPLICA ao processo nº [PROCESSO], relativo à demanda sobre ABONO DE PERMANÊNCIA, pelos motivos de fato e de direito a seguir expostos:\n\nI - DOS FATOS\n\nO cliente faz jus ao recebimento do abono de permanência, conforme previsão constitucional e legal.\n\nII - DO DIREITO\n\nO abono de permanência é direito adquirido do servidor que se submete ao regime de aposentadoria por tempo de contribuição.\n\nIII - DO PEDIDO\n\nPelo exposto, requer-se a procedência da demanda.\n\nRespeitosamente submetido.`,\n\n  'recurso-padrao': `EXCELENTÍSSIMO SENHOR DOUTOR PRESIDENTE DO TRIBUNAL\n\nVem, respeitosamente, perante Vossa Excelência, o(a) cliente [CLIENTE], por seu advogado infra-assinado, interpor RECURSO ao processo nº [PROCESSO], pelos motivos de fato e de direito a seguir expostos:\n\nI - DOS FUNDAMENTOS DO RECURSO\n\nA decisão recorrida contraria a jurisprudência consolidada sobre a matéria.\n\nII - DO PEDIDO\n\nRequer-se o provimento do recurso para reformar a decisão recorrida.\n\nRespeitosamente submetido.`\n};\n\n/**\n * Gera uma petição baseada em modelo e informações do caso\n */\nexport async function gerarPeticao(dados: DadosPeticao): Promise<string> {\n  try {\n    // Obter template base\n    const chaveTemplate = `${dados.tipo}-${dados.tese.toLowerCase()}`;\n    let template = templates[chaveTemplate] || templates['replica-padrao'] || templates['recurso-padrao'];\n\n    // Substituir placeholders\n    let peticao = template\n      .replace('[CLIENTE]', dados.cliente)\n      .replace('[PROCESSO]', dados.processo);\n\n    // Se houver informações adicionais, usar IA para melhorar\n    if (dados.informacoesAdicionais && dados.informacoesAdicionais.trim()) {\n      peticao = await melhorarComIA(peticao, dados.informacoesAdicionais, dados.tese);\n    }\n\n    return peticao;\n  } catch (error) {\n    console.error('Erro ao gerar petição:', error);\n    throw new Error('Erro ao gerar petição');\n  }\n}\n\n/**\n * Melhora a petição usando IA (OpenAI)\n */\nasync function melhorarComIA(peticao: string, informacoesAdicionais: string, tese: string): Promise<string> {\n  try {\n    const prompt = `Você é um advogado especialista em direito trabalhista e administrativo. \n\nMelhor a seguinte petição jurídica sobre ${tese}, incorporando as informações adicionais fornecidas:\n\nPetição Original:\n${peticao}\n\nInformações Adicionais do Caso:\n${informacoesAdicionais}\n\nPor favor, melhore a petição mantendo a estrutura formal, mas tornando-a mais robusta e fundamentada com as informações fornecidas.`;\n\n    const response = await openai.chat.completions.create({\n      model: 'gpt-4.1-mini',\n      messages: [\n        {\n          role: 'user',\n          content: prompt\n        }\n      ],\n      max_tokens: 2000,\n      temperature: 0.7\n    });\n\n    const conteudo = response.choices[0]?.message?.content;\n    return conteudo || peticao;\n  } catch (error) {\n    console.error('Erro ao melhorar com IA:', error);\n    // Retornar petição original se IA falhar\n    return peticao;\n  }\n}\n\n/**\n * Analisa um documento e extrai informações relevantes\n */\nexport async function analisarDocumento(conteudo: string, tipo: string): Promise<string[]> {\n  try {\n    const prompt = `Você é um analista jurídico. Analise o seguinte documento de tipo \"${tipo}\" e extraia os pontos-chave relevantes para uma petição jurídica:\n\n${conteudo}\n\nForneça uma lista de pontos-chave em formato de tópicos.`;\n\n    const response = await openai.chat.completions.create({\n      model: 'gpt-4.1-mini',\n      messages: [\n        {\n          role: 'user',\n          content: prompt\n        }\n      ],\n      max_tokens: 1000,\n      temperature: 0.7\n    });\n\n    const conteudo_resposta = response.choices[0]?.message?.content || '';\n    return conteudo_resposta.split('\\n').filter(linha => linha.trim());\n  } catch (error) {\n    console.error('Erro ao analisar documento:', error);\n    return [];\n  }\n}\n\n/**\n * Gera um resumo de uma petição\n */\nexport async function gerarResumo(peticao: string): Promise<string> {\n  try {\n    const prompt = `Você é um advogado. Faça um resumo executivo da seguinte petição jurídica em no máximo 3 parágrafos:\n\n${peticao}`;\n\n    const response = await openai.chat.completions.create({\n      model: 'gpt-4.1-mini',\n      messages: [\n        {\n          role: 'user',\n          content: prompt\n        }\n      ],\n      max_tokens: 500,\n      temperature: 0.7\n    });\n\n    return response.choices[0]?.message?.content || 'Resumo não disponível';\n  } catch (error) {\n    console.error('Erro ao gerar resumo:', error);\n    return 'Resumo não disponível';\n  }\n}\n\n/**\n * Valida uma petição quanto a completude e qualidade\n */\nexport async function validarPeticao(peticao: string): Promise<{ valida: boolean; avisos: string[] }> {\n  const avisos: string[] = [];\n\n  // Validações básicas\n  if (!peticao.includes('Excelentíssimo')) {\n    avisos.push('Falta saudação formal ao juiz');\n  }\n\n  if (!peticao.includes('Pelos motivos')) {\n    avisos.push('Falta introdução dos motivos');\n  }\n\n  if (!peticao.includes('Pedido') && !peticao.includes('pedido')) {\n    avisos.push('Falta seção de pedidos');\n  }\n\n  if (peticao.length < 500) {\n    avisos.push('Petição muito curta, considere adicionar mais argumentação');\n  }\n\n  return {\n    valida: avisos.length === 0,\n    avisos\n  };\n}\n
