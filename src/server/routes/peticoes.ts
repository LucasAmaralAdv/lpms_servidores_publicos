import express, { Router, Response } from 'express';\nimport { gerarPeticao, analisarDocumento, gerarResumo, validarPeticao } from '../services/peticaoService';\nimport { authMiddleware, AuthRequest } from '../middleware';\n\nconst router = Router();\n\n// Gerar petição\nrouter.post('/gerar', authMiddleware, async (req: AuthRequest, res: Response) => {\n  try {\n    const { tipo, tese, cliente, processo, modeloReferencia, informacoesAdicionais } = req.body;\n\n    if (!tipo || !tese || !cliente || !processo) {\n      return res.status(400).json({ error: 'Campos obrigatórios não preenchidos' });\n    }\n\n    const peticao = await gerarPeticao({\n      tipo,\n      tese,\n      cliente,\n      processo,\n      modeloReferencia,\n      informacoesAdicionais\n    });\n\n    // Validar petição\n    const validacao = await validarPeticao(peticao);\n\n    res.json({\n      id: Math.random().toString(36).substr(2, 9),\n      tipo,\n      tese,\n      cliente,\n      processo,\n      conteudo: peticao,\n      status: 'pronta',\n      dataCriacao: new Date().toISOString(),\n      validacao\n    });\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Analisar documento\nrouter.post('/analisar', authMiddleware, async (req: AuthRequest, res: Response) => {\n  try {\n    const { conteudo, tipo } = req.body;\n\n    if (!conteudo) {\n      return res.status(400).json({ error: 'Conteúdo do documento é obrigatório' });\n    }\n\n    const pontosChave = await analisarDocumento(conteudo, tipo || 'documento');\n\n    res.json({\n      pontosChave,\n      totalPontos: pontosChave.length\n    });\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Gerar resumo de petição\nrouter.post('/resumo', authMiddleware, async (req: AuthRequest, res: Response) => {\n  try {\n    const { peticao } = req.body;\n\n    if (!peticao) {\n      return res.status(400).json({ error: 'Petição é obrigatória' });\n    }\n\n    const resumo = await gerarResumo(peticao);\n\n    res.json({ resumo });\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Validar petição\nrouter.post('/validar', authMiddleware, async (req: AuthRequest, res: Response) => {\n  try {\n    const { peticao } = req.body;\n\n    if (!peticao) {\n      return res.status(400).json({ error: 'Petição é obrigatória' });\n    }\n\n    const validacao = await validarPeticao(peticao);\n\n    res.json(validacao);\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Listar petições do usuário\nrouter.get('/', authMiddleware, async (req: AuthRequest, res: Response) => {\n  try {\n    // Simular listagem de petições\n    const peticoes = [\n      {\n        id: '1',\n        tipo: 'replica',\n        tese: 'Licença-Prêmio',\n        cliente: 'João Silva',\n        processo: '#001',\n        status: 'pronta',\n        dataCriacao: '28/10/2025'\n      },\n      {\n        id: '2',\n        tipo: 'recurso',\n        tese: 'Abono Permanência',\n        cliente: 'Maria Santos',\n        processo: '#002',\n        status: 'enviada',\n        dataCriacao: '27/10/2025'\n      }\n    ];\n\n    res.json(peticoes);\n  } catch (error: any) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Obter petição específica\nrouter.get('/:id', authMiddleware, async (req: AuthRequest, res: Response) => {\n  try {\n    const { id } = req.params;\n\n    // Simular busca de petição\n    const peticao = {\n      id,\n      tipo: 'replica',\n      tese: 'Licença-Prêmio',\n      cliente: 'João Silva',\n      processo: '#001',\n      conteudo: 'Conteúdo da petição...',\n      status: 'pronta',\n      dataCriacao: '28/10/2025'\n    };\n\n    res.json(peticao);\n  } catch (error: any) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Atualizar petição\nrouter.put('/:id', authMiddleware, async (req: AuthRequest, res: Response) => {\n  try {\n    const { id } = req.params;\n    const { conteudo, status } = req.body;\n\n    // Simular atualização\n    const peticao = {\n      id,\n      conteudo,\n      status,\n      dataAtualizacao: new Date().toISOString()\n    };\n\n    res.json(peticao);\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Deletar petição\nrouter.delete('/:id', authMiddleware, async (req: AuthRequest, res: Response) => {\n  try {\n    const { id } = req.params;\n\n    res.json({ message: `Petição ${id} deletada com sucesso` });\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\nexport default router;\n
