import express, { Router, Response } from 'express';\nimport { authMiddleware, AuthRequest } from '../middleware';\n\nconst router = Router();\n\nconst respostasTemplate = {\n andamento: `Prezado(a) [CLIENTE],\n\nObrigado por entrar em contato conosco.\n\nSobre o andamento do seu processo n [PROCESSO]:\n\nO processo encontra-se em fase de [FASE]. O ultimo andamento foi registrado em [DATA], quando [EVENTO].\n\nO proximo prazo importante e em [PROXIMO_PRAZO], quando [ACAO].\n\nContinuamos acompanhando seu caso com atencao e o manteremos informado sobre qualquer desenvolvimento importante.\n\nQualquer duvida, nao hesite em entrar em contato.\n\nAtenciosamente,\nEquipe Juridica`,\n\n documentos: `Prezado(a) [CLIENTE],\n\nObrigado por sua pergunta.\n\nOs documentos necessarios para seu caso sao:\n\n1. [DOC1]\n2. [DOC2]\n3. [DOC3]\n\nPor favor, envie-nos esses documentos assim que possivel para que possamos prosseguir com seu processo.\n\nCaso tenha duvidas sobre como obter esses documentos, estamos a disposicao para ajuda-lo.\n\nAtenciosamente,\nEquipe Juridica`,\n\n prazos: `Prezado(a) [CLIENTE],\n\nObrigado por entrar em contato.\n\nOs prazos importantes do seu processo sao:\n\n- [PRAZO1]: [DESCRICAO1]\n- [PRAZO2]: [DESCRICAO2]\n- [PRAZO3]: [DESCRICAO3]\n\nEstamos acompanhando todos esses prazos para garantir que nenhum seja perdido.\n\nAtenciosamente,\nEquipe Juridica`,\n\n honorarios: `Prezado(a) [CLIENTE],\n\nObrigado por sua pergunta sobre os honorarios.\n\nConforme contrato assinado entre as partes, os honorarios sao:\n\n[DETALHES_HONORARIOS]\n\nO pagamento pode ser realizado em [FORMAS_PAGAMENTO].\n\nCaso tenha duvidas, estamos a disposicao.\n\nAtenciosamente,\nEquipe Juridica`,\n\n outro: `Prezado(a) [CLIENTE],\n\nObrigado por entrar em contato conosco.\n\n[RESPOSTA_PERSONALIZADA]\n\nCaso tenha outras duvidas, nao hesite em nos contatar.\n\nAtenciosamente,\nEquipe Juridica`\n};\n\n// Gerar resposta\nrouter.post('/gerar', authMiddleware, async (req: AuthRequest, res: Response) => {\n try {\n const { cliente, pergunta, tipo, canalEnvio } = req.body;\n\n if (!cliente || !pergunta || !tipo) {\n return res.status(400).json({ error: 'Campos obrigatorios nao preenchidos' });\n }\n\n const template = (respostasTemplate as any)[tipo] || respostasTemplate.outro;\n const resposta = template\n .replace('[CLIENTE]', cliente)\n .replace('[PROCESSO]', '#001')\n .replace('[FASE]', 'julgamento')\n .replace('[DATA]', new Date().toLocaleDateString('pt-BR'))\n .replace('[EVENTO]', 'foi proferida sentenca')\n .replace('[PROXIMO_PRAZO]', '15/11/2025')\n .replace('[ACAO]', 'vence prazo para recurso');\n\n res.json({\n id: Math.random().toString(36).substr(2, 9),\n cliente,\n pergunta,\n tipo,\n canalEnvio,\n resposta,\n status: 'gerada',\n dataCriacao: new Date().toISOString()\n });\n } catch (error: any) {\n res.status(400).json({ error: error.message });\n }\n});\n\n// Enviar resposta\nrouter.post('/enviar', authMiddleware, async (req: AuthRequest, res: Response) => {\n try {\n const { cliente, resposta, canalEnvio, numeroWhatsapp } = req.body;\n\n if (!cliente || !resposta || !canalEnvio) {\n return res.status(400).json({ error: 'Dados obrigatorios nao preenchidos' });\n }\n\n // Simular envio\n const resultado = {\n id: Math.random().toString(36).substr(2, 9),\n cliente,\n canalEnvio,\n status: 'enviada',\n dataEnvio: new Date().toISOString(),\n mensagem: `Resposta enviada com sucesso via ${canalEnvio.toUpperCase()}`\n };\n\n res.json(resultado);\n } catch (error: any) {\n res.status(400).json({ error: error.message });\n }\n});\n\n// Listar respostas\nrouter.get('/', authMiddleware, async (req: AuthRequest, res: Response) => {\n try {\n const { status } = req.query;\n\n const respostas = [\n {\n id: '1',\n cliente: 'Joao Silva',\n pergunta: 'Como esta o andamento do meu processo?',\n tipo: 'andamento',\n canalEnvio: 'whatsapp',\n status: 'enviada',\n dataCriacao: '28/10/2025'\n },\n {\n id: '2',\n cliente: 'Maria Santos',\n pergunta: 'Quais documentos preciso enviar?',\n tipo: 'documentos',\n canalEnvio: 'email',\n status: 'enviada',\n dataCriacao: '27/10/2025'\n }\n ];\n\n const filtradas = status\n ? respostas.filter(r => r.status === status)\n : respostas;\n\n res.json(filtradas);\n } catch (error: any) {\n res.status(500).json({ error: error.message });\n }\n});\n\n// Obter resposta especifica\nrouter.get('/:id', authMiddleware, async (req: AuthRequest, res: Response) => {\n try {\n const { id } = req.params;\n\n const resposta = {\n id,\n cliente: 'Joao Silva',\n pergunta: 'Como esta o andamento do meu processo?',\n resposta: 'Seu processo esta em fase de julgamento...',\n tipo: 'andamento',\n canalEnvio: 'whatsapp',\n status: 'enviada',\n dataCriacao: '28/10/2025'\n };\n\n res.json(resposta);\n } catch (error: any) {\n res.status(500).json({ error: error.message });\n }\n});\n\n// Atualizar resposta\nrouter.put('/:id', authMiddleware, async (req: AuthRequest, res: Response) => {\n try {\n const { id } = req.params;\n const { resposta, status } = req.body;\n\n res.json({\n id,\n resposta,\n status,\n dataAtualizacao: new Date().toISOString()\n });\n } catch (error: any) {\n res.status(400).json({ error: error.message });\n }\n});\n\n// Deletar resposta\nrouter.delete('/:id', authMiddleware, async (req: AuthRequest, res: Response) => {\n try {\n const { id } = req.params;\n\n res.json({ message: `Resposta ${id} deletada com sucesso` });\n } catch (error: any) {\n res.status(400).json({ error: error.message });\n }\n});\n\nexport default router;\n
