import express, { Router, Response } from 'express';\nimport {\n  analisarClienteOportunidades,\n  analisarClientesEmMassa,\n  gerarRelatorioOportunidades,\n  priorizarOportunidades\n} from '../services/oportunidadeService';\nimport { authMiddleware, AuthRequest } from '../middleware';\n\nconst router = Router();\n\n// Analisar cliente especifico\nrouter.post('/analisar-cliente', authMiddleware, async (req: AuthRequest, res: Response) => {\n  try {\n    const { clienteId, nome, cpf, dataAdmissao, dataAposentadoria, cargo, salario } = req.body;\n\n    if (!nome || !dataAdmissao || !dataAposentadoria) {\n      return res.status(400).json({ error: 'Dados obrigatorios nao preenchidos' });\n    }\n\n    const oportunidades = await analisarClienteOportunidades({\n      id: clienteId || Math.random().toString(36).substr(2, 9),\n      nome,\n      cpf,\n      dataAdmissao,\n      dataAposentadoria,\n      cargo,\n      salario: salario || 0\n    });\n\n    res.json({\n      cliente: { nome, cpf, cargo },\n      oportunidades,\n      total: oportunidades.length\n    });\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Analisar multiplos clientes\nrouter.post('/analisar-massa', authMiddleware, async (req: AuthRequest, res: Response) => {\n  try {\n    const { clientes } = req.body;\n\n    if (!Array.isArray(clientes) || clientes.length === 0) {\n      return res.status(400).json({ error: 'Lista de clientes e obrigatoria' });\n    }\n\n    const resultados = await analisarClientesEmMassa(clientes);\n    const todasOportunidades: any[] = [];\n\n    resultados.forEach((opps, clienteId) => {\n      todasOportunidades.push({\n        clienteId,\n        oportunidades: opps\n      });\n    });\n\n    res.json({\n      totalClientes: clientes.length,\n      totalOportunidades: todasOportunidades.reduce((sum, item) => sum + item.oportunidades.length, 0),\n      resultados: todasOportunidades\n    });\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Gerar relatorio de oportunidades\nrouter.post('/relatorio', authMiddleware, async (req: AuthRequest, res: Response) => {\n  try {\n    const { oportunidades } = req.body;\n\n    if (!Array.isArray(oportunidades)) {\n      return res.status(400).json({ error: 'Lista de oportunidades e obrigatoria' });\n    }\n\n    const relatorio = await gerarRelatorioOportunidades(oportunidades);\n\n    res.json({\n      relatorio,\n      dataGeracao: new Date().toISOString()\n    });\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Priorizar oportunidades\nrouter.post('/priorizar', authMiddleware, async (req: AuthRequest, res: Response) => {\n  try {\n    const { oportunidades, salario, tempoServico } = req.body;\n\n    if (!Array.isArray(oportunidades)) {\n      return res.status(400).json({ error: 'Lista de oportunidades e obrigatoria' });\n    }\n\n    const oportunidadesPriorizadas = priorizarOportunidades(\n      oportunidades,\n      salario || 0,\n      tempoServico || 0\n    );\n\n    res.json({\n      oportunidadesPriorizadas,\n      total: oportunidadesPriorizadas.length\n    });\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Listar oportunidades do usuario\nrouter.get('/', authMiddleware, async (req: AuthRequest, res: Response) => {\n  try {\n    // Simular listagem\n    const oportunidades = [\n      {\n        id: '1',\n        cliente: 'Joao Silva',\n        tese: 'Licenca-Premio',\n        confianca: 95,\n        status: 'nova',\n        dataCriacao: '28/10/2025'\n      },\n      {\n        id: '2',\n        cliente: 'Maria Santos',\n        tese: 'Abono Permanencia',\n        confianca: 88,\n        status: 'nova',\n        dataCriacao: '28/10/2025'\n      }\n    ];\n\n    res.json(oportunidades);\n  } catch (error: any) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Obter oportunidade especifica\nrouter.get('/:id', authMiddleware, async (req: AuthRequest, res: Response) => {\n  try {\n    const { id } = req.params;\n\n    // Simular busca\n    const oportunidade = {\n      id,\n      cliente: 'Joao Silva',\n      tese: 'Licenca-Premio',\n      confianca: 95,\n      motivo: 'Cliente tem 15 anos de servico e nao usufruiu licenca-premio',\n      documentosNecessarios: ['Contracheque', 'Ficha Funcional'],\n      status: 'nova',\n      dataCriacao: '28/10/2025'\n    };\n\n    res.json(oportunidade);\n  } catch (error: any) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Marcar oportunidade como ajuizada\nrouter.put('/:id/ajuizar', authMiddleware, async (req: AuthRequest, res: Response) => {\n  try {\n    const { id } = req.params;\n\n    res.json({\n      id,\n      status: 'ajuizada',\n      dataAjuizamento: new Date().toISOString()\n    });\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\nexport default router;\n
