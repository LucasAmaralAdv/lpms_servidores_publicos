import React, { useState } from 'react';\nimport '../styles/DescoberAOportunidades.css';\n\ninterface Oportunidade {\n  id: string;\n  cliente: string;\n  cpf: string;\n  tese: string;\n  confianca: number;\n  motivo: string;\n  documentosNecessarios: string[];\n  dataIdentificacao: string;\n  status: 'nova' | 'analisada' | 'ajuizada';\n}\n\ninterface ClienteAnalise {\n  id: string;\n  nome: string;\n  cpf: string;\n  dataAdmissao: string;\n  dataAposentadoria: string;\n  cargo: string;\n  oportunidades: Oportunidade[];\n}\n\nexport function DescoberAOportunidades() {\n  const [step, setStep] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [clienteSelecionado, setClienteSelecionado] = useState<ClienteAnalise | null>(null);\n  const [oportunidades, setOportunidades] = useState<Oportunidade[]>([]);\n  const [filtroStatus, setFiltroStatus] = useState('todas');\n  const [filtroConfianca, setFiltroConfianca] = useState(0);\n\n  const clientes = [\n    {\n      id: '1',\n      nome: 'Jo√£o Silva',\n      cpf: '123.456.789-00',\n      dataAdmissao: '15/03/2010',\n      dataAposentadoria: '15/03/2025',\n      cargo: 'Analista de Sistemas',\n      oportunidades: []\n    },\n    {\n      id: '2',\n      nome: 'Maria Santos',\n      cpf: '987.654.321-00',\n      dataAdmissao: '20/05/2008',\n      dataAposentadoria: '20/05/2023',\n      cargo: 'Advogada',\n      oportunidades: []\n    },\n    {\n      id: '3',\n      nome: 'Pedro Costa',\n      cpf: '456.789.123-00',\n      dataAdmissao: '10/01/2012',\n      dataAposentadoria: '10/01/2027',\n      cargo: 'Auditor',\n      oportunidades: []\n    }\n  ];\n\n  const handleAnalisarCliente = async (cliente: ClienteAnalise) => {\n    setLoading(true);\n    setMessage('');\n\n    try {\n      // Simular an√°lise\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      const oportunidadesIdentificadas: Oportunidade[] = [\n        {\n          id: '1',\n          cliente: cliente.nome,\n          cpf: cliente.cpf,\n          tese: 'Licen√ßa-Pr√™mio',\n          confianca: 95,\n          motivo: 'Cliente tem 15 anos de servi√ßo e n√£o usufruiu licen√ßa-pr√™mio',\n          documentosNecessarios: ['Contracheque', 'Ficha Funcional', 'Certid√£o de Tempo de Servi√ßo'],\n          dataIdentificacao: new Date().toLocaleDateString('pt-BR'),\n          status: 'nova'\n        },\n        {\n          id: '2',\n          cliente: cliente.nome,\n          cpf: cliente.cpf,\n          tese: 'Abono Perman√™ncia',\n          confianca: 88,\n          motivo: 'Cliente se enquadra nos crit√©rios de aposentadoria por tempo de contribui√ß√£o',\n          documentosNecessarios: ['Contracheque', 'Certid√£o de Aposentadoria', 'Comprovante de Contribui√ß√£o'],\n          dataIdentificacao: new Date().toLocaleDateString('pt-BR'),\n          status: 'nova'\n        },\n        {\n          id: '3',\n          cliente: cliente.nome,\n          cpf: cliente.cpf,\n          tese: 'Diferen√ßas Salariais',\n          confianca: 72,\n          motivo: 'Poss√≠vel diferen√ßa entre sal√°rio recebido e sal√°rio devido',\n          documentosNecessarios: ['Contracheque', 'Folha de Pagamento', 'Decreto de Reajuste'],\n          dataIdentificacao: new Date().toLocaleDateString('pt-BR'),\n          status: 'nova'\n        }\n      ];\n\n      setClienteSelecionado(cliente);\n      setOportunidades(oportunidadesIdentificadas);\n      setMessage('‚úÖ An√°lise conclu√≠da! Oportunidades identificadas.');\n      setStep(2);\n    } catch (error) {\n      setMessage('‚ùå Erro ao analisar cliente. Tente novamente.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAnalisarTodos = async () => {\n    setLoading(true);\n    setMessage('');\n\n    try {\n      // Simular an√°lise em massa\n      await new Promise(resolve => setTimeout(resolve, 3000));\n\n      let todasOportunidades: Oportunidade[] = [];\n      clientes.forEach((cliente, idx) => {\n        const optsCliente: Oportunidade[] = [\n          {\n            id: `${idx}-1`,\n            cliente: cliente.nome,\n            cpf: cliente.cpf,\n            tese: 'Licen√ßa-Pr√™mio',\n            confianca: 85 + Math.random() * 15,\n            motivo: 'Eleg√≠vel para licen√ßa-pr√™mio',\n            documentosNecessarios: ['Contracheque', 'Ficha Funcional'],\n            dataIdentificacao: new Date().toLocaleDateString('pt-BR'),\n            status: 'nova'\n          }\n        ];\n        todasOportunidades = [...todasOportunidades, ...optsCliente];\n      });\n\n      setOportunidades(todasOportunidades);\n      setMessage(`‚úÖ An√°lise em massa conclu√≠da! ${todasOportunidades.length} oportunidades identificadas.`);\n      setStep(2);\n    } catch (error) {\n      setMessage('‚ùå Erro ao analisar clientes. Tente novamente.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const oportunidadesFiltradas = oportunidades.filter(opp => {\n    const statusCombina = filtroStatus === 'todas' || opp.status === filtroStatus;\n    const confiancaCombina = opp.confianca >= filtroConfianca;\n    return statusCombina && confiancaCombina;\n  });\n\n  const handleMarcarAjuizada = (id: string) => {\n    setOportunidades(opp => \n      opp.map(o => o.id === id ? { ...o, status: 'ajuizada' as const } : o)\n    );\n  };\n\n  return (\n    <div className=\"descoberta-container\">\n      <div className=\"descoberta-card\">\n        <div className=\"descoberta-header\">\n          <h1>Descoberta de Oportunidades</h1>\n          <p>Identifique automaticamente novas teses aplic√°veis aos seus clientes</p>\n        </div>\n\n        {message && (\n          <div className={`message ${message.includes('‚úÖ') ? 'success' : 'error'}`}>\n            {message}\n          </div>\n        )}\n\n        {/* Step 1: Sele√ß√£o de Cliente */}\n        {step === 1 && (\n          <div className=\"form-step\">\n            <h2>Selecione um Cliente para An√°lise</h2>\n\n            <div className=\"clientes-grid\">\n              {clientes.map(cliente => (\n                <div key={cliente.id} className=\"cliente-card\">\n                  <div className=\"cliente-info\">\n                    <h3>{cliente.nome}</h3>\n                    <p><strong>CPF:</strong> {cliente.cpf}</p>\n                    <p><strong>Cargo:</strong> {cliente.cargo}</p>\n                    <p><strong>Admiss√£o:</strong> {cliente.dataAdmissao}</p>\n                    <p><strong>Aposentadoria:</strong> {cliente.dataAposentadoria}</p>\n                  </div>\n                  <button\n                    onClick={() => handleAnalisarCliente(cliente)}\n                    disabled={loading}\n                    className=\"btn btn-primary\"\n                  >\n                    {loading ? '‚è≥ Analisando...' : 'üîç Analisar'}\n                  </button>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"analise-massa\">\n              <h3>Ou Analisar Todos os Clientes</h3>\n              <button\n                onClick={handleAnalisarTodos}\n                disabled={loading}\n                className=\"btn btn-secondary\"\n              >\n                {loading ? '‚è≥ Analisando...' : 'üìä Analisar Todos'}\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Step 2: Resultados */}\n        {step === 2 && (\n          <div className=\"form-step\">\n            <h2>Oportunidades Identificadas</h2>\n\n            {clienteSelecionado && (\n              <div className=\"cliente-selecionado\">\n                <h3>{clienteSelecionado.nome}</h3>\n                <p>CPF: {clienteSelecionado.cpf} | Cargo: {clienteSelecionado.cargo}</p>\n              </div>\n            )}\n\n            <div className=\"filtros\">\n              <div className=\"filtro-grupo\">\n                <label>Status:</label>\n                <select value={filtroStatus} onChange={(e) => setFiltroStatus(e.target.value)}>\n                  <option value=\"todas\">Todas</option>\n                  <option value=\"nova\">Nova</option>\n                  <option value=\"analisada\">Analisada</option>\n                  <option value=\"ajuizada\">Ajuizada</option>\n                </select>\n              </div>\n\n              <div className=\"filtro-grupo\">\n                <label>Confian√ßa M√≠nima: {filtroConfianca}%</label>\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"100\"\n                  value={filtroConfianca}\n                  onChange={(e) => setFiltroConfianca(Number(e.target.value))}\n                />\n              </div>\n            </div>\n\n            <div className=\"oportunidades-list\">\n              {oportunidadesFiltradas.length > 0 ? (\n                oportunidadesFiltradas.map(opp => (\n                  <div key={opp.id} className=\"oportunidade-card\">\n                    <div className=\"opp-header\">\n                      <h3>{opp.tese}</h3>\n                      <div className=\"opp-badges\">\n                        <span className=\"confianca-badge\" style={{\n                          background: opp.confianca > 90 ? '#d1e7dd' : opp.confianca > 75 ? '#cfe2ff' : '#fff3cd',\n                          color: opp.confianca > 90 ? '#0f5132' : opp.confianca > 75 ? '#084298' : '#856404'\n                        }}>\n                          {opp.confianca.toFixed(0)}% confian√ßa\n                        </span>\n                        <span className={`status-badge ${opp.status}`}>\n                          {opp.status === 'nova' && 'üÜï Nova'}\n                          {opp.status === 'analisada' && '‚úÖ Analisada'}\n                          {opp.status === 'ajuizada' && '‚öñÔ∏è Ajuizada'}\n                        </span>\n                      </div>\n                    </div>\n\n                    <div className=\"opp-content\">\n                      <p className=\"motivo\"><strong>Motivo:</strong> {opp.motivo}</p>\n\n                      <div className=\"documentos\">\n                        <strong>Documentos Necess√°rios:</strong>\n                        <ul>\n                          {opp.documentosNecessarios.map((doc, idx) => (\n                            <li key={idx}>{doc}</li>\n                          ))}\n                        </ul>\n                      </div>\n\n                      <p className=\"data-identificacao\">\n                        <small>Identificada em: {opp.dataIdentificacao}</small>\n                      </p>\n                    </div>\n\n                    <div className=\"opp-acoes\">\n                      <button className=\"btn btn-small btn-primary\">\n                        üìã Ajuizar A√ß√£o\n                      </button>\n                      {opp.status !== 'ajuizada' && (\n                        <button\n                          onClick={() => handleMarcarAjuizada(opp.id)}\n                          className=\"btn btn-small btn-secondary\"\n                        >\n                          ‚úì Marcar como Ajuizada\n                        </button>\n                      )}\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <p className=\"sem-dados\">Nenhuma oportunidade encontrada com os filtros selecionados</p>\n              )}\n            </div>\n\n            <div className=\"resumo-stats\">\n              <div className=\"stat\">\n                <span className=\"label\">Total de Oportunidades:</span>\n                <span className=\"value\">{oportunidades.length}</span>\n              </div>\n              <div className=\"stat\">\n                <span className=\"label\">Novas:</span>\n                <span className=\"value\">{oportunidades.filter(o => o.status === 'nova').length}</span>\n              </div>\n              <div className=\"stat\">\n                <span className=\"label\">Ajuizadas:</span>\n                <span className=\"value\">{oportunidades.filter(o => o.status === 'ajuizada').length}</span>\n              </div>\n              <div className=\"stat\">\n                <span className=\"label\">Valor Potencial:</span>\n                <span className=\"value\">R$ {(oportunidades.length * 25000).toLocaleString('pt-BR')}</span>\n              </div>\n            </div>\n\n            <button onClick={() => setStep(1)} className=\"btn btn-secondary\">\n              ‚Üê Voltar\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n
